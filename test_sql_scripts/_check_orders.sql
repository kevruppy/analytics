-- noqa: disable=all
CREATE OR REPLACE TEMP TABLE TMP_TEST_ORDERS AS
WITH CTE AS
(
SELECT
	(LOAD_RESULT->>'ORDER_ID')::INTEGER AS ORDER_ID
	,(LOAD_RESULT->>'IS_TEST_ORDER')::BOOLEAN AS IS_TEST_ORDER
FROM
	RAW_DATA.ORDERS
)
SELECT
	ORDER_ID
FROM
	CTE
GROUP BY ALL 
HAVING
	CASE WHEN LIST_CONTAINS(ARRAY_AGG(DISTINCT IS_TEST_ORDER),TRUE) THEN TRUE ELSE FALSE END = TRUE;

CREATE OR REPLACE TEMP TABLE _ORDERS AS
WITH CTE_ORDERS AS
(
SELECT
	JSON_EXTRACT_STRING(LOAD_RESULT,['ORDER_ID','STATUS_NAME','PRODUCT_NAME','CREATION_DATE','STATUS_CHANGE_DATE','IS_TEST_ORDER']) AS _EXTRACT
FROM
	RAW_DATA.ORDERS
),
CTE_ORDERS_PLACEMENT AS
(
SELECT
	(LOAD_RESULT ->> 'ORDER_ID')::INTEGER AS ORDER_ID
FROM
	RAW_DATA.ORDERS_WITH_PLACEMENT
)
SELECT
	_EXTRACT[1]::INTEGER AS ORDER_ID
	,_EXTRACT[2]::VARCHAR AS STATUS_NAME
	,_EXTRACT[3]::VARCHAR AS PRODUCT_NAME
	,_EXTRACT[4]::DATE AS CREATION_DATE
	,_EXTRACT[5]::DATE AS STATUS_CHANGE_DATE
	,CASE WHEN _EXTRACT[1]::INTEGER IN (SELECT * FROM CTE_ORDERS_PLACEMENT) THEN TRUE ELSE FALSE END AS IS_PLACEMENT
FROM
	CTE_ORDERS
WHERE
	_EXTRACT[1]::INTEGER NOT IN (SELECT * FROM TMP_TEST_ORDERS);

CREATE OR REPLACE TEMP TABLE PROV_RULES AS
SELECT
	MD5(CONCAT_WS('-', LOAD_RESULT ->> 'productName', LOAD_RESULT ->> 'start', LOAD_RESULT ->> 'end')) AS _CHECKSUM
	,LOAD_RESULT ->> 'productName' AS PRODUCT_NAME
	,(LOAD_RESULT ->> 'start')::DATE AS START_DATE
	,(LOAD_RESULT ->> 'end')::DATE AS END_DATE
	,(LOAD_RESULT ->> 'provision' ->> 'baseProvision')::FLOAT AS BASE_PROVISION
	,(LOAD_RESULT ->> 'provision' ->> 'placementProvision')::FLOAT AS PLACEMENT_PROVISION
	,(LOAD_RESULT -> 'provision' -> 'proportionalProvision'->> 'target')::INTEGER AS PROP_PROV_TGT
	,(LOAD_RESULT -> 'provision' -> 'proportionalProvision'->> 'value')::FLOAT AS PROP_PROV_VAL
FROM
	RAW_DATA.PROVISION_RULES
QUALIFY
	ROW_NUMBER () OVER (PARTITION BY MD5(CONCAT_WS('-', LOAD_RESULT ->> 'productName', LOAD_RESULT ->> 'start', LOAD_RESULT ->> 'end'))  ORDER BY 1) = 1;

CREATE OR REPLACE TEMP TABLE PROV_RULES_X AS 
SELECT
	PROV_RULES.* EXCLUDE(PRODUCT_NAME)
	,MAP_PROVISION_RULES_PRODUCT.PRODUCT_NAME
FROM
	PROV_RULES
LEFT JOIN
	MAPPING.MAP_PROVISION_RULES_PRODUCT
ON
	PROV_RULES.PRODUCT_NAME = MAP_PROVISION_RULES_PRODUCT.PROVISION_RULES_PRODUCT_NAME;

CREATE OR REPLACE TEMP TABLE ORDERS_ENRICHED AS
SELECT
	_ORDERS.*
	,PROV_RULES_X.* EXCLUDE(_CHECKSUM, START_DATE, END_DATE, PRODUCT_NAME)
FROM
	_ORDERS
LEFT JOIN
	PROV_RULES_X
ON
	_ORDERS.PRODUCT_NAME = PROV_RULES_X.PRODUCT_NAME
AND
	_ORDERS.CREATION_DATE BETWEEN PROV_RULES_X.START_DATE AND PROV_RULES_X.END_DATE;

CREATE OR REPLACE TEMP TABLE ORDERS_ENRICHED_W_STATUS AS
SELECT *, MAX_BY(STATUS_NAME, STATUS_CHANGE_DATE) OVER (PARTITION BY ORDER_ID) AS CURRENT_STATUS
FROM ORDERS_ENRICHED;

WITH CTE AS
(
SELECT DISTINCT * EXCLUDE(STATUS_NAME, STATUS_CHANGE_DATE)
FROM ORDERS_ENRICHED_W_STATUS
)
SELECT *, COUNT(*) OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE), PRODUCT_NAME) AS GROSS_ORDER_PER_MONTH,
COUNT (DISTINCT CASE WHEN CURRENT_STATUS='CONFIRMED' THEN ORDER_ID END) OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE), PRODUCT_NAME) AS NET_ORDER_PER_MONTH,
ROW_NUMBER () OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE), PRODUCT_NAME ORDER BY CREATION_DATE, ORDER_ID) AS RN
FROM CTE  
ORDER BY PRODUCT_NAME, creation_date