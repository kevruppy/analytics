name: Run CI
on:
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.5
      - name: Create virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Get changed Python files
        id: changed-py-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            *.py
            **/*.py
      - name: Lint with Pylint
        if: steps.changed-py-files.outputs.any_changed == 'true'
        env:
          PYTHONPATH: ${{ vars.PYTHONPATH }}
        run: pylint ${{ steps.changed-py-files.outputs.all_changed_files }}
      - name: Lint with isort
        env:
          PYTHONPATH: ${{ vars.PYTHONPATH }}
        run: isort ${{ steps.changed-py-files.outputs.all_changed_files }}
      - name: Test with pytest
        env:
          PYTHONPATH: ${{ vars.PYTHONPATH }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          MOTHERDUCK_TOKEN: ${{ secrets.MOTHERDUCK_TOKEN }}
        run: |
          cd tests
          pytest
      #- name: Get dbt analyses & models to lint
      #  id: dbt_sql_files_to_lint
      #  shell: bash
      #  run: |
      #    echo "DBT_SQL_FILES=$(git diff --name-only --cached main | grep '.sql$' | grep -E 'dbt_analytics/(analyses|models)')" >> $GITHUB_OUTPUT
      #- name: Get DuckDB SQL files to lint
      #  id: duckdb_sql_files_to_lint
      #  shell: bash
      #  run: |
      #    echo "DUCKDB_SQL_FILES=$(git diff --name-only --cached main | grep '.sql$' | grep 'duckdb_analytics')" >> $GITHUB_OUTPUT
      #- name: Lint dbt analyses & models with SQLFluff
      #  run: |
      #    if [[ -n "${{ steps.dbt_sql_files_to_lint.outputs.DBT_SQL_FILES }}" ]]; then
      #      sqlfluff lint "${{ steps.dbt_sql_files_to_lint.outputs.DBT_SQL_FILES }}"
      #    else
      #      echo "No dbt SQL files to be linted found. Skipping."
      #    fi
      #- name: Lint DuckDB SQL files with SQLFluff
      #  run: |
      #    if [[ -n "${{ steps.duckdb_sql_files_to_lint.outputs.DUCKDB_SQL_FILES }}" ]]; then
      #      sqlfluff lint "${{ steps.duckdb_sql_files_to_lint.outputs.DUCKDB_SQL_FILES }}"
      #    else
      #      echo "No DuckDB SQL files to be linted found. Skipping."
      #    fi
      - name: Format with prettier
        uses: creyD/prettier_action@v4.3
        with:
          dry: True
          prettier_options: "--check **/*.{json,md,yaml,yml}"
          only_changed: True
