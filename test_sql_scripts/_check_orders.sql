--noqa: disable=AM04,RF02,RF04

CREATE OR REPLACE TEMP TABLE TMP_TEST_ORDERS AS
WITH CTE AS (
	SELECT
		(LOAD_RESULT ->> 'ORDER_ID')::INTEGER AS ORDER_ID
		,(LOAD_RESULT ->> 'IS_TEST_ORDER')::BOOLEAN AS IS_TEST_ORDER
	FROM
		RAW_DATA.ORDERS
)

SELECT ORDER_ID
FROM
	CTE
GROUP BY ALL
HAVING
	CASE WHEN LIST_CONTAINS(ARRAY_AGG(DISTINCT IS_TEST_ORDER),TRUE) THEN TRUE ELSE FALSE END = TRUE; -- noqa: disable=ST02

CREATE OR REPLACE TEMP TABLE _ORDERS AS
WITH CTE_ORDERS AS (
	SELECT
		JSON_EXTRACT_STRING(
			LOAD_RESULT
			,['ORDER_ID','STATUS_NAME','PRODUCT_NAME','CREATION_DATE','STATUS_CHANGE_DATE','IS_TEST_ORDER']
		) AS _EXTRACT
	FROM
		RAW_DATA.ORDERS
)

,CTE_ORDERS_PLACEMENT AS (
	SELECT (LOAD_RESULT ->> 'ORDER_ID')::INTEGER AS ORDER_ID
	FROM
		RAW_DATA.ORDERS_WITH_PLACEMENT
)

SELECT
	_EXTRACT[1]::INTEGER AS ORDER_ID
	,_EXTRACT[2]::VARCHAR AS STATUS_NAME
	,_EXTRACT[3]::VARCHAR AS PRODUCT_NAME
	,_EXTRACT[4]::DATE AS CREATION_DATE
	,_EXTRACT[5]::DATE AS STATUS_CHANGE_DATE
	,CASE WHEN _EXTRACT[1]::INTEGER IN (SELECT * FROM CTE_ORDERS_PLACEMENT) THEN TRUE ELSE FALSE END AS IS_PLACEMENT
FROM
	CTE_ORDERS
WHERE
	_EXTRACT[1]::INTEGER NOT IN (SELECT * FROM TMP_TEST_ORDERS);

CREATE OR REPLACE TEMP TABLE PROV_RULES AS
SELECT
	(LOAD_RESULT ->> 'start')::DATE AS START_DATE
	,(LOAD_RESULT ->> 'end')::DATE AS END_DATE
	,(LOAD_RESULT ->> 'provision' ->> 'baseProvision')::FLOAT AS BASE_PROVISION
	,(LOAD_RESULT ->> 'provision' ->> 'placementProvision')::FLOAT AS PLACEMENT_PROVISION
	,(LOAD_RESULT -> 'provision' -> 'proportionalProvision' ->> 'target')::INTEGER AS PROP_PROV_TGT
	,(LOAD_RESULT -> 'provision' -> 'proportionalProvision' ->> 'value')::FLOAT AS PROP_PROV_VAL
	,MD5(CONCAT_WS('-',LOAD_RESULT ->> 'productName',LOAD_RESULT ->> 'start',LOAD_RESULT ->> 'end')) AS _CHECKSUM
	,LOAD_RESULT ->> 'productName' AS PRODUCT_NAME
FROM
	RAW_DATA.PROVISION_RULES
QUALIFY
	ROW_NUMBER() OVER (PARTITION BY
		MD5(CONCAT_WS('-',LOAD_RESULT ->> 'productName',LOAD_RESULT ->> 'start',LOAD_RESULT ->> 'end'))
	ORDER BY 1) = 1;

CREATE OR REPLACE TEMP TABLE PROV_RULES_ENRICHED AS
SELECT
	PROV_RULES.* EXCLUDE (PRODUCT_NAME)
	,MAP_PROVISION_RULES_PRODUCT.PRODUCT_NAME
FROM
	PROV_RULES
LEFT OUTER JOIN
	MAPPING.MAP_PROVISION_RULES_PRODUCT
	ON
		PROV_RULES.PRODUCT_NAME = MAP_PROVISION_RULES_PRODUCT.PROVISION_RULES_PRODUCT_NAME;

CREATE OR REPLACE TEMP TABLE ORDERS_ENRICHED AS
SELECT
	_ORDERS.*
	,PROV_RULES_ENRICHED.* EXCLUDE (_CHECKSUM,START_DATE,END_DATE,PRODUCT_NAME)
FROM
	_ORDERS
LEFT OUTER JOIN
	PROV_RULES_ENRICHED
	ON
		_ORDERS.PRODUCT_NAME = PROV_RULES_ENRICHED.PRODUCT_NAME
		AND
		_ORDERS.CREATION_DATE BETWEEN PROV_RULES_ENRICHED.START_DATE AND PROV_RULES_ENRICHED.END_DATE;

CREATE OR REPLACE TEMP TABLE ORDERS_ENRICHED_W_STATUS AS
SELECT
	*
	,MAX_BY(STATUS_NAME,STATUS_CHANGE_DATE) OVER (PARTITION BY ORDER_ID) AS CURRENT_STATUS
FROM
	ORDERS_ENRICHED;

CREATE OR REPLACE TEMP TABLE CALC_BASE AS
WITH CTE AS (
	SELECT DISTINCT * EXCLUDE (STATUS_NAME,STATUS_CHANGE_DATE)
	FROM
		ORDERS_ENRICHED_W_STATUS
)

SELECT
	*
	,COUNT(*) OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE),PRODUCT_NAME) AS GROSS_ORDER_PER_MONTH
	,COUNT(DISTINCT CASE WHEN CURRENT_STATUS = 'CONFIRMED' THEN ORDER_ID END)
		OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE),PRODUCT_NAME)
		AS NET_ORDER_PER_MONTH
FROM
	CTE;

CREATE OR REPLACE TEMP TABLE _RES AS
WITH CTE_GROSS AS (
	SELECT
		*
		,BASE_PROVISION AS GROSS_BASE_PROV
		,ROW_NUMBER() OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE),PRODUCT_NAME ORDER BY CREATION_DATE,ORDER_ID) AS RN
		,CASE WHEN IS_PLACEMENT = TRUE THEN COALESCE(PLACEMENT_PROVISION,0) ELSE 0 END AS GROSS_PLC_PROV
		,CASE WHEN RN > PROP_PROV_TGT THEN PROP_PROV_VAL ELSE 0 END AS GROSS_PROP_PROV
	FROM
		CALC_BASE
)

,CTE_NET AS (
	SELECT
		*
		,BASE_PROVISION AS NET_BASE_PROV
		,ROW_NUMBER() OVER (PARTITION BY DATE_TRUNC('MONTH',CREATION_DATE),PRODUCT_NAME ORDER BY CREATION_DATE,ORDER_ID) AS RN
		,CASE WHEN IS_PLACEMENT = TRUE THEN COALESCE(PLACEMENT_PROVISION,0) ELSE 0 END AS NET_PLC_PROV
		,CASE WHEN RN > PROP_PROV_TGT THEN PROP_PROV_VAL ELSE 0 END AS NET_PROP_PROV
	FROM
		CALC_BASE
	WHERE
		CURRENT_STATUS = 'CONFIRMED'
)

SELECT
	CTE_GROSS.ORDER_ID
	,CTE_GROSS.PRODUCT_NAME
	,CTE_GROSS.CREATION_DATE
	,CTE_GROSS.GROSS_BASE_PROV
	,CTE_GROSS.GROSS_PLC_PROV
	,CTE_GROSS.GROSS_PROP_PROV
	,COALESCE(CTE_NET.NET_BASE_PROV,0) AS NET_BASE_PROV
	,COALESCE(CTE_NET.NET_PLC_PROV,0) AS NET_PLC_PROV
	,COALESCE(CTE_NET.NET_PROP_PROV,0) AS NET_PROP_PROV
FROM
	CTE_GROSS
LEFT OUTER JOIN
	CTE_NET
	ON
		CTE_GROSS.ORDER_ID = CTE_NET.ORDER_ID;

WITH CTE_SQL AS (
	SELECT
		PRODUCT_NAME
		,DATE_TRUNC('MONTH',CREATION_DATE) AS CREATION_MONTH
		,SUM(GROSS_BASE_PROV) AS GROSS_BASE_PROV
		,SUM(GROSS_PLC_PROV) AS GROSS_PLC_PROV
		,SUM(GROSS_PROP_PROV) AS GROSS_PROP_PROV
		,SUM(NET_BASE_PROV) AS NET_BASE_PROV
		,SUM(NET_PLC_PROV) AS NET_PLC_PROV
		,SUM(NET_PROP_PROV) AS NET_PROP_PROV
	FROM
		_RES
	GROUP BY ALL
)

,CTE_DBT AS (
	SELECT
		PRODUCT_NAME
		,DATE_TRUNC('MONTH',CREATION_DATE) AS CREATION_MONTH
		,SUM(GROSS_BASE_PROVISION) AS GROSS_BASE_PROVISION
		,SUM(GROSS_PLACEMENT_PROVISION) AS GROSS_PLACEMENT_PROVISION
		,SUM(GROSS_PROPORTIONAL_PROVISION) AS GROSS_PROPORTIONAL_PROVISION
		,SUM(NET_BASE_PROVISION) AS NET_BASE_PROVISION
		,SUM(NET_PLACEMENT_PROVISION) AS NET_PLACEMENT_PROVISION
		,SUM(NET_PROPORTIONAL_PROVISION) AS NET_PROPORTIONAL_PROVISION
	FROM MARTS.MRT_ORDERS
	GROUP BY ALL
)

(
	SELECT * FROM CTE_SQL
	EXCEPT
	SELECT * FROM CTE_DBT
)
UNION ALL
(
	SELECT * FROM CTE_DBT
	EXCEPT
	SELECT * FROM CTE_SQL
);
