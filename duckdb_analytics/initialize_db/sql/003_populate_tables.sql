-- sqlfluff:rules:references.keywords:ignore_words:HEADER,JSON

/*
CREATE SECRET TO ALLOW IMPORTING FROM S3 BUCKET
*/

--noqa: disable=all

CREATE OR REPLACE SECRET AWS_SECRET (
    TYPE S3
	,KEY_ID 'KEY_ID__VALUE'
	,SECRET 'SECRET__VALUE'
	,REGION 'REGION__VALUE'
);

--noqa: enable=all

/*
ORDERS
*/

-- LOAD CSV

CREATE OR REPLACE TEMPORARY TABLE TMP_ORDERS AS
SELECT COLUMNS(*)
FROM
	READ_CSV(
		's3://analytics-rawdata/orders.csv'
		,ALL_VARCHAR = TRUE
		,HEADER = TRUE
		,SEP = ','
	);

-- UNLOAD THE DATA AS JSON

COPY TMP_ORDERS
TO '~/TMP_DUCK_DB_EXPORT_ORDERS.json' (FORMAT JSON);

-- RE-LOAD THE JSON
--> MOSTLY JSON IN RAW_DATA SCHEMA

INSERT INTO RAW_DATA.ORDERS (LOAD_RESULT)
SELECT JSON AS LOAD_RESULT
FROM
	READ_JSON(
		'~/TMP_DUCK_DB_EXPORT_ORDERS.json'
		,RECORDS = FALSE
	)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.ORDERS);

DROP TABLE IF EXISTS TMP_ORDERS;

/*
ORDERS WITH PLACEMENT
*/

-- LOAD CSV

CREATE OR REPLACE TEMPORARY TABLE TMP_ORDERS_WITH_PLACEMENT AS
SELECT COLUMNS(*)
FROM
	READ_CSV(
		's3://analytics-rawdata/orders_with_placement.csv'
		,ALL_VARCHAR = TRUE
		,HEADER = TRUE
		,SEP = ','
	);

-- UNLOAD THE DATA AS JSON

COPY TMP_ORDERS_WITH_PLACEMENT
TO '~/TMP_DUCK_DB_EXPORT_ORDERS_WITH_PLACEMENT.json' (FORMAT JSON);

-- RE-LOAD THE JSON
--> MOSTLY JSON IN RAW_DATA SCHEMA

INSERT INTO RAW_DATA.ORDERS_WITH_PLACEMENT (LOAD_RESULT)
SELECT JSON AS LOAD_RESULT
FROM
	READ_JSON(
		'~/TMP_DUCK_DB_EXPORT_ORDERS_WITH_PLACEMENT.json'
		,RECORDS = FALSE
	)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.ORDERS_WITH_PLACEMENT);

DROP TABLE IF EXISTS TMP_ORDERS_WITH_PLACEMENT;

/*
PROVISION RULES
*/

INSERT INTO RAW_DATA.PROVISION_RULES (LOAD_RESULT)
SELECT JSON AS LOAD_RESULT
FROM
	READ_JSON(
		's3://analytics-rawdata/provision_rules.json'
		,RECORDS = FALSE
	)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.PROVISION_RULES);

/*
NET PROMOTOR SCORE (NPS)
*/

INSERT INTO RAW_DATA.NET_PROMOTOR_SCORES (TRANSACTION_ID,RATING_DATE,RATING,TOOL)
SELECT
	TRANSACTION_ID
	,RATING_DATE
	,RATING
	,TOOL
FROM
	READ_CSV(
		's3://analytics-rawdata/nps.csv'
		,ALL_VARCHAR = TRUE
		,HEADER = TRUE
		,SEP = ','
	)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.NET_PROMOTOR_SCORES);

/*
EXCHANGE RATES
*/

INSERT INTO RAW_DATA.EXCHANGE_RATES (LOAD_RESULT)
SELECT JSON AS LOAD_RESULT
FROM
	READ_JSON(
		's3://analytics-rawdata/exchange_rates.json'
		,RECORDS = FALSE
	)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.EXCHANGE_RATES);

/*
PARTNERS
*/

INSERT INTO RAW_DATA.PARTNERS (UPDATED_ON,PRODUCT_NAME,PARTNER_NAME)
SELECT
	UPDATED_ON
	,PRODUCT_NAME
	,PARTNER_NAME
FROM
	READ_CSV(
		's3://analytics-rawdata/partners.csv'
		,ALL_VARCHAR = TRUE
		,HEADER = TRUE
		,SEP = ','
	)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.PARTNERS);

/*
CALENDAR
*/

INSERT INTO RAW_DATA.CALENDAR
(
	CALENDAR_DATE
	,CALENDAR_WEEK
	,CALENDAR_MONTH
	,CALENDAR_QUARTER
	,CALENDAR_YEAR
	,CALENDAR_DAY_NAME
	,IS_WEEKEND
)
SELECT --noqa: ST06
	DATE_TRUNC('DAY',GENERATE_SERIES) AS CALENDAR_DATE
	,WEEK(CALENDAR_DATE)::INTEGER AS CALENDAR_WEEK
	,MONTH(CALENDAR_DATE)::INTEGER AS CALENDAR_MONTH
	,QUARTER(CALENDAR_DATE)::INTEGER AS CALENDAR_QUARTER
	,YEAR(CALENDAR_DATE)::INTEGER AS CALENDAR_YEAR
	,DAYNAME(CALENDAR_DATE) AS CALENDAR_DAY_NAME
	-- SATURDAY/ SUNDAY -> WEEKEND
	,CASE WHEN LEFT(CALENDAR_DAY_NAME,1) = 'S' THEN TRUE ELSE FALSE END AS IS_WEEKEND --noqa: ST02
FROM
	GENERATE_SERIES('2020-01-01'::DATE,'2030-12-31'::DATE,INTERVAL 1 DAY)
WHERE
	TRUE
	AND
	(SELECT COUNT(*) = 0 AS _CHECK FROM RAW_DATA.CALENDAR);
