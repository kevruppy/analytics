version: 2

models:
  - name: stg_provision_rules
    description: Contains raw provision rules. Base provision is mandatory, other provision types not. There might be multiple rules per product
    config:
      enabled: True
      schema: stage
      materialized: table
      contract:
        enforced: true
    data_tests:
      - row_count_source_match:
          source_name: raw
          table_name: provision_rules
      - dbt_utils.unique_combination_of_columns:
          name: stg_provision_rules__unique_combination_of_columns
          combination_of_columns:
            - PRODUCT_NAME
            - START_DATE
            - END_DATE
          config:
            severity: warn
    columns:
      - name: _CHECK_SUM
        description: "{{ var('dsc_check_sum') }}"
        data_type: VARCHAR
      - name: PRODUCT_NAME
        description: "{{ var('dsc_prov_product_name') }}"
        data_type: VARCHAR
        data_tests:
          - not_null
          - dbt_utils.not_empty_string
      - name: START_DATE
        description: "{{ var('dsc_start_date') }}"
        data_type: DATE
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              max_value: "CURRENT_DATE()"
      - name: END_DATE
        description: "{{ var('dsc_end_date') }}"
        data_type: DATE
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              max_value: "CURRENT_DATE()"
          - dbt_utils.expression_is_true:
              expression: "> START_DATE"
      - name: BASE_PROVISION
        description: "{{ var('dsc_base_provision') }}"
        data_type: FLOAT
        data_tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
      - name: PLACEMENT_PROVISION
        description: "{{ var('dsc_placement_provision') }}"
        data_type: FLOAT
      - name: PROPORTIONAL_PROVISION
        description: "{{ var('dsc_proportional_provision') }}"
        data_type: JSON
        # Rule can be null but must not be empty object
        data_tests:
          - dbt_utils.not_accepted_values::
              values: ["{}"]
